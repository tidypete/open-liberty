---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: 'Application template for IBM WebSphere Application Server for Developers Liberty Profile'
    tags: instant-app,3rd-party,javaee,java
    version: 1.0.0
  name: websphere-liberty-example


### list of labels that are applied to every object during the template to config transformation

labels:
  template: websphere-liberty


### list set of parameters
  
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  value: liberty-app
  required: true
  
- description: 'Custom hostname for service routes.  Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
  name: APPLICATION_HOSTNAME
  value: ''
  
- description: 'URL to the source code repository hosting your WebSphere Liberty application(e.g. https://github.com/tidypete/websphere-liberty.git)'
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/tidypete/websphere-liberty.git
  required: true
  
- description: Git branch/tag reference.
  name: SOURCE_REPOSITORY_REF
  value: master
  required: true
  
- description: It is necessary to accept the terms of the WebSphere Application Server for Developers and IBM JRE licenses. This is achieved by specifying the environment variable LICENSE equal to accept when running an image. You can also view the license terms by setting this variable to view. Failure to set the variable will result in the termination of the container with a usage statement.  
  name: LICENSE
  value: accept
  required: true

  
### this is used to trigger a deployment if the image changes = has been rebuilt

objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"


### defines the deployment configuration

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        name: "${APPLICATION_NAME}"
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
          application: "${APPLICATION_NAME}"
      spec:
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          ports:
          - containerPort: 9080
            protocol: TCP
          - containerPort: 9443
            protocol: TCP
          env:
          - name: LICENSE
            value: "${LICENSE}"

            
### defines the build configuration (using the Docker strategy)

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: ""
    strategy:
      type: Docker
      dockerStrategy:
        nocache: true
        env:
        - name: HTTP_PROXY
          value: ''
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    triggers:
    - type: ConfigChange
    - type: Generic
      generic:
        secret: secret101
    - type: GitHub
      github:
        secret: secret101
        
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - name: 9080-tcp
      protocol: TCP
      port: 9080
      targetPort: 9080
      nodePort: 0
    - name: 9443-tcp
      protocol: TCP
      port: 9443
      targetPort: 9443
      nodePort: 0
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The web server's http port.


### defines the external http route

- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-http-route"
  metadata:
    name: "${APPLICATION_NAME}-http-route"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's http service.
  spec:
    host: "${APPLICATION_HOSTNAME}"
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 9080-tcp
    wildcardPolicy: None
